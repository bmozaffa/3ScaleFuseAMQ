#!/usr/bin/env groovy
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import javax.net.ssl.HostnameVerifier
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.SSLContext
import javax.net.ssl.TrustManager
import javax.net.ssl.X509TrustManager
import java.security.SecureRandom
import java.net.URLEncoder




def gitRepo = params.GIT_REPO
def gitBranch = params.GIT_BRANCH != null && params.GIT_BRANCH != "" ? params.GIT_BRANCH : "master"



node('maven') {

env.uatnamespace = "fisdemo";

	def towerExtraVars = [
		git_repo: gitRepo,
		git_branch: gitBranch,
		//threescale_cicd_api_backend_hostname: params.OPENSHIFT_SERVICE_NAME + ":8080",
		threescale_cicd_api_backend_hostname: params.API_URL,
		threescale_cicd_openapi_smoketest_operation: params.ANSIBLE_SMOKE_TEST_OPREATION,
		threescale_cicd_api_backend_scheme: "http",
		threescale_cicd_api_base_system_name: params.OPENSHIFT_SERVICE_NAME,
		threescale_cicd_validate_openapi: false,
		openapi_file: params.SWAGGER_FILE_NAME
	]







            stage("Checkout") {
                 checkout scm
                  //git url: gitRepo, branch: gitBranch
            }

            stage("Compile") {
             	sh 'cd '
                sh "mvn clean package -DskipTests -Popenshift"
            }

            stage("Test") {
                sh "mvn test"
            }
            
            
            

 
  stage('build') {
    print 'build'
     openshiftBuild(namespace: "${env.uatnamespace}", buildConfig: "fisgateway-service", showBuildLogs: "true")
  }
  
 
  stage("Deploy DEV") {
                sh "oc project dev"
                sh "oc patch dc app --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"app\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"dev\", \"name\": \"app:DevSnapshot-$version\"}}}]}}' -n dev"

                openshiftDeploy depCfg: "app",
                        namespace: "dev"
            }
 
 
 
  stage('staging') {
    print 'stage'
    openshiftDeploy(namespace: "${env.uatnamespace}", deploymentConfig: "fisgateway-service")
  }
  
  
  stage ('promotionCheck') {
      def userInput = input( id: "userInput", message: "Promote to UAT?", parameters: [ [$class: "TextParameterDefinition", defaultValue: "Comments?", description: "comments", name: "comments"] ])
      print 'promotionCheck'
  		openshiftTag(namespace: "${env.uatnamespace}", sourceStream: "fisgateway-service",  sourceTag: "latest", destinationnamespace: "${env.uatnamespace}", destinationStream: "fisgateway-service-uat", destinationTag: "uatready")
  }

  stage('UAT') {
    print 'UAT'
    openshiftDeploy(namespace: "${env.uatnamespace}", deploymentConfig: "fisgateway-service-uat")
 }
 
 
 stage('moveToProd'){
    echo "UAT at ${env.uatnamespace} and PROD at ${env.prodnamespace}"
    openshiftTag alias: "false",  destStream: "fisgateway-service", destTag: "latest", destinationNamespace: "${env.prodnamespace}", namespace: "${env.uatnamespace}", srcStream: "fisgateway-service-uat", srcTag: "uatready", verbose: "true"
  }
  
  stage('StartNewServices') {
    print 'Start new service with one pod running' 
    openshiftScale depCfg: "fisgateway-service-new", namespace: "${env.prodnamespace}", replicaCount: "1", verifyReplicaCount: "true", verbose: "true"
  }
  
  stage('UpdateRouteToAB') { 
    print 'deleteroute' 
    openshiftDeleteResourceByKey keys: "fisgateway-service", namespace: "${env.prodnamespace}", types: "route", verbose: "true"
    
    print 'Update Route to only point to both new and stable service' 
    openshiftCreateResource jsonyaml: "{    'apiVersion': 'v1',    'kind': 'Route',    'metadata': {        'labels': {            'component': 'fisgateway-service-stable',            'group': 'quickstarts',            'project': 'fisgateway-service-stable',            'provider': 's2i',            'template': 'fisgateway-service',            'version': '1.0.0'        },        'name': 'fisgateway-service',        'namespace': '${env.prodnamespace}'    },    'spec': {        'alternateBackends': [            {                'kind': 'Service',                'name': 'fisgateway-service-new',                'weight': 30            }        ],        'host': 'fisgateway-service-${env.prodnamespace}.master.rhdp.ocp.cloud.lab.eng.bos.redhat.com',        'to': {            'kind': 'Service',            'name': 'fisgateway-service-stable',            'weight': 70        },        'wildcardPolicy': 'None'    }}", namespace: "${env.prodnamespace}", verbose: "false"
  }



 stage('CreateRouteInside3scale') {

		catchError {

			sh "oc process -f "+params.API_CAST_ROUTE_TEMPLATE_FILE+" -p BASE_NAME="+params.OPENSHIFT_SERVICE_NAME+" -p MAJOR_VERSION="+params.MAJOR_VERSION+" -p WILDCARD_DOMAIN="+params.WILDCARD_DOMAIN+" | oc create -f - -n "+params.THREESCALE_OPENSHIFT_PROJECT

		}

	}


	stage('Deploy API with Ansible to 3scale') {


		// Deploy the API to 3scale
		ansibleTower towerServer: params.ANSIBLE_TOWER_SERVER,
		inventory: params.ANSIBLE_TEST_INVENTORY,
		jobTemplate: params.ANSIBLE_JOB_TEMPLATE,
		extraVars: JsonOutput.toJson(towerExtraVars)

	}



}
}
